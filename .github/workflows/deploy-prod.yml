# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: 운영배포 파이프라인 실행

on:
  workflow_dispatch:
    inputs:
      branch:
        description: '배포할 브랜치를 입력합니다. (예: release/1.0.0)'
        required: true
        default: 'release/1.0.0'
      info:
        description: '배포내용을 입력합니다.'
        required: true

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 배포내용을 출력한다.
        if: ${{ always() }}
        run: |
          echo "배포 내용"
          echo "- 배포 내용 : ${{ inputs.info }}"
      - name: checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: create remote directory
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_2 }}
          username: ubuntu
          key: ${{ secrets.KEY }}
          script: mkdir -p /home/ubuntu/srv/ubuntu

      - name: copy source via ssh key
        uses: burnett01/rsync-deployments@4.1
        with:
          switches: -avzr --delete
          remote_path: /home/ubuntu/srv/ubuntu
          remote_host: ${{ secrets.HOST_2 }}
          remote_user: ubuntu
          remote_key: ${{ secrets.KEY }}

      ## gradle build
      - name: Build with Gradle
        run: ./gradlew bootJar

      ## 웹 이미지 빌드 및 도커허브에 push
      - name: web docker build and push
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_REPO }}/modutime-web .
          docker push ${{ secrets.DOCKER_REPO }}/modutime-web

      ## docker compose up
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_2 }}
          username: ubuntu
          key: ${{ secrets.KEY }}
          script: |
            cd /home/ubuntu/srv/ubuntu
            cat > .env << EOL
            DB_URL=${{secrets.PROD_DB_URL}}
            DB_USERNAME=${{secrets.PROD_DB_USERNAME}}
            DB_PASSWORD=${{secrets.PROD_DB_PASSWORD}}
            EOL
            
            sudo sh install-docker.sh
            sudo docker rm -f $(docker ps -qa)
            sudo docker pull ${{ secrets.DOCKER_REPO }}/modutime-web
            sudo docker pull ${{ secrets.DOCKER_REPO }}/modutime-nginx

            sudo docker-compose --env-file .env up -d
            sudo docker image prune -f
